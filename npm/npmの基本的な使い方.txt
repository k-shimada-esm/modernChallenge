https://www.webdesignleaves.com/pr/jquery/npm_basic.html

1.npm とは [Node Package Manager]
    ・Node.js のパッケージ（Package）を管理するツール。
    ・パッケージとは Node.js で利用できる JavaScript のライブラリやフレームワークなどのこと。
    ・各種ライブラリなどの依存関係を管理・解決してくれる。
    ・パッケージの検索や更新、バージョン管理、アンインストールなどもできる。

    $ npm version       ： npm, node のバージョン確認
    $ npm help (コマンド名 or キーワード) ： オンラインヘルプが起動される。
    $ npm コマンド -h   ： クイック（簡易）ヘルプ

2.パッケージのインストール
    $ npm install -g パッケージ名   ： グローバルインストール
                                      全てのプロジェクトで同じパッケージを使う。
    $ npm list -g --depth=0        ： グローバルインストールの確認。--depth=0 は一番上の階層のみ。
    $ npm install パッケージ名  ： ローカルインストール（プロジェクトのディレクトリで実行）
                                  対象のプロジェクトでのみインストールしたパッケージを使用する。
    $ npm list  ： カレントディレクトリのインストール確認。

    ・package.json にはそのプロジェクトでインストールしたパッケージの情報が追加され、
    　インストールした際のオプション（本番環境用、開発環境用、プロジェクト固有など）も追加される。
    ・package-lock.json が自動的に生成され、このファイルを使ってパッケージのバージョンを固定する。

3.ローカルインストール
    ・パッケージをインストールすると node_modules ディレクトリが自動的に作成される。パッケージ関連のファイルが格納される。
    　「package.json」が存在しない時は作成すること。
    $ npm init                          ： package.json の生成
    $ npm install パッケージ名 return    ： 指定パッケージをインストール
    $ npm install                       ： プロジェクトのコピー。
                                           パッケージ名を指定せずに実行すると、package.json に記述されたパッケージを一括インストール。

4.初期化 npm init
    【package.json のフィールド】
        version     ：バージョン
        description ：説明
        main        ：公開するパッケージのエントリポイント（Default：index.js）
        scripts 	：npm run 〜 や npm start などで実行できるスクリプトを定義するフィールド。
                    　Default：（test コマンド。ドキュメントルートに server.js があれば "start": "node server.js"）
        keywords	：npm パッケージハブでの検索に使われるキーワード
        author	    ：制作者
        license	    ：ソフトウェア・ライセンス
        	        　（Default：ISC（フリーソフトウェアライセンス））
   
    ①インストール、バージョンを指定してインストール
        $ npm install   ：パッケージ名 パッケージ名 パッケージ名...
        $ npm install   ：パッケージ名@バージョン
        $ npm install   ：パッケージ名@">=バージョン <バージョン"
    ②install コマンドオプション
        --save-prod ※-P ：省略時。
                           package.json の dependencies に追加される。
                           ※Production（本番環境）の意味。
        --save-dev  ※-D ：テストツールなど開発環境で使う（開発時に依存する）パッケージに指定。
                           package.json の devDependencies に追加される。
                           ※Development（開発環境）の意味。
                           ※npm install で --production オプションを指定するとこのパッケージはインストールされない。
        --save-optional ※-O ：オプショナルなパッケージに指定する。
                           package.json の optionalDependencies に追加される。
                           npm install でインストールできないときはスキップされる。
        --no-save       ：package.json に書き込まない（パッケージ管理をしない）場合に指定する。
                          package.json に追加されない。
                          npm install でインストールされない。
        上記オプションに同時指定可能。
        --save-exact ※-E    ：dependencies / devDependencies のバージョン指定に（同じメジャーバージョンの最新版/semver range ではなく）
                               正確なバージョンのみを依存の対象とする（明示的なバージョン固定）。


    ③プロジェクトの複製・コピー
        ・既存の package.json を新プロジェクトのルートディレクトリに配置して、
          パッケージ名を指定せずにインストールコマンドを実行すれば
          同じパッケージで構成されるプロジェクトを複製することができる。
          ※その時点での同じメジャーバージョンの最新版がインストールされる。
            package.json は変更されない。
          ※既存の package-lock.json もコピーすれば、同じバージョンがインストールされる。
        ・npm install で --production オプションを指定して実行すると 
          package.json の devDependencies に記載されているパッケージはインストールされない。



